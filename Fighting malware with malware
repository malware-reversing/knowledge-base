If malware authors follow software engineering best practices, each function should do its own thing except it may get different arguments.
This essentially means that each function can act as its own mini-program.
Sometimes we can test theories against malware using its own functions, but sometimes we can even completely use the malware against itself.

I recently came across a sample where everything which had even negligible use was obfuscated, and what was happening was that the function accepted four arguments, but those four arguments were hardcoded in each call to the function.
This means that we could essentially set the EIP to point to the start of the arguments push, F8 five times (push all four arguments on the stack and execute the function) and the result would be a pointer to the deobfuscated string.
By doing this, we could see every single string the program was trying to hide.

TODO: idapython/idac/emulation of doing this, as there were 100+ xrefs.
