This one has been explained a lot over the internet, but anyway sometimes we need to debug DLLs instead of EXEs. We can't just dump it in the debugger because we need to run on a particular export function name rather than the entry point.

# Make the DLL an EXE
Using a PE Viewer, we can change the entry point to become the address of the exported function, and change the executable type from DLL to become EXE. This doesn't always work though, if the attacker decides to play some tricks in their malware.
Under Optional Headers -> DllCharacteristics, make sure to remove the "DLL can move" option in the PE structure. This removes randomized function addresses (ASLR) which will mess up dynamic analysis results over multiple debugging sessions.
To me the real advantage of doing this is you can actually save your changes in IDA when debugging. If you are debugging through rundll32, then your .idb is actually for rundll32, not for the malware you are running, and that means you can't save your analysis results properly.
-
# DLL uses CRT
Some DLLs might make use of the C++ Runtime Library (CRT), and if they do and we simply make the DLL an EXE, some functions will fail.
What we will need to do is manually run the _CRT_INIT function in the DLL first with the necessary parameters:
-> BOOL WINAPI _CRT_INIT(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);
---> Exactly how this is done, did not try yet. Example hash: 13dbac9d270330f4e4ae8a1407c9531ded31d243878339532288905e0e4e56b5
---> But it should be: hInstDll is just the address of the DLL (which is now an EXE), then we use a standard fdwReason, and not sure about lpReserved.
---
Confirmed we could e.g. run the ___acrt_initialize_heap() function manually and the heap works fine. But not sure how that function is getting called in the first place, perhaps through thread local storage.

# Run using rundll32.exe in IDA
Run as administrator (because it needs access system directory) ida.exe if your DLL is 32 bit, and ida64.exe is 64 bit.
If ida.exe, open %systemroot%\SysWOW64\rundll32.exe, and if ida64.exe open %systemroot%\System32\rundll32.exe
Debugger options -> Suspend on library load/unload
Process options -> Defaults for application/input/directory, and then set parameters as: "<path-to-dll>", export
Note that the export name seems required in the process options parameter field, even if it is just "DllMain"
Note the quotes (required if you have spaces in the filepath) and the space in between the filepath and the export function name (always required)
Now just run and keep running it (F9) until you see the DLL loaded
In the Modules tab on the top right, double click on the newly loaded DLL
Now that the DLL you want is loaded into memory, the previous double click will bring you to the list of entry export functions in that module, then set your breakpoint there
Continue running the module until your breakpoint is it

# Run using other debuggers
Some other debuggers like OllyDbg have their own DLL loaders which make running DLLs easier, but I won't touch on those.
