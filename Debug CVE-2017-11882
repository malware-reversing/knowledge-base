Requirements
---
Vulnerable version of Windows (even old Windows 10, don't update)
Vulnerable version of MS Office (2010, 2013, 2016, don't update)

Test https://github.com/embedi/CVE-2017-11882/blob/master/example/exploit.rtf -> Calc should spawn
Note that exploit code runs under Equation Editor, not Microsoft Word. The Equation Editor does not spawn as a child of Microsoft Word.

Debug
---
Easiest method is to create the registry key for debugging once a certain process is spawned
HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ImageFileExecutionOptions\eqnedt32.exe -> Create String "Debugger" with value point to the full path of x32dbg.exe.
Now when you open the exploit doc, equation editor is exploited but once the process spawns it will go under control of your debugger (so not yet exploited).
Since we're doing this for malware analysis and not for exploitation, we don't care how exactly the exploit code work because there is a repeatable way to analyze it easily.
There is no ASLR so we set a breakpoint at the constant address, 0x00402114, which is "ret". Once it returns, it goes to whatever shellcode the malware has.
-> This could be e.g. direct API call to WinExec with the argument already in the stack, but it could also be full blown shellcode for slightly more advanced malware.
So F9 to that breakpoint address and we can start debugging the shellcode. At least in the sample I tested, I had to pause winword.exe as well otherwise it showed waiting for OLE action for a while and eventually closed.
-> winword.exe closing is not what we want, because the exploit shellcode may do something related to an existing winword.exe process.
